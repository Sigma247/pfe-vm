{"remainingRequest":"/home/khalil/Projects/pfe_docker/pfe-vm/vuejs_frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/khalil/Projects/pfe_docker/pfe-vm/vuejs_frontend/src/components/CrawlersList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/khalil/Projects/pfe_docker/pfe-vm/vuejs_frontend/src/components/CrawlersList.vue","mtime":1633827983584},{"path":"/home/khalil/Projects/pfe_docker/pfe-vm/vuejs_frontend/node_modules/cache-loader/dist/cjs.js","mtime":1632090923690},{"path":"/home/khalil/Projects/pfe_docker/pfe-vm/vuejs_frontend/node_modules/babel-loader/lib/index.js","mtime":1632090923670},{"path":"/home/khalil/Projects/pfe_docker/pfe-vm/vuejs_frontend/node_modules/cache-loader/dist/cjs.js","mtime":1632090923690},{"path":"/home/khalil/Projects/pfe_docker/pfe-vm/vuejs_frontend/node_modules/vue-loader/lib/index.js","mtime":1632090924245}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["CrawlersList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuOA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;AAKA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA;AACA;;AAEA;;AAEA;AACA;;;AAGA;;AAEA","file":"CrawlersList.vue","sourceRoot":"src/components","sourcesContent":["<template>\n   <v-app id=\"inspire\">\n      <v-main>\n        <v-card>\n          <v-card-title>\n            Crawlers List\n            <v-spacer></v-spacer>\n            <v-text-field\n              v-model=\"search\"\n              append-icon=\"mdi-magnify\"\n              label=\"Search\"\n              single-line\n              hide-details\n            ></v-text-field>\n          </v-card-title>\n          <v-data-table\n            :headers=\"headers\"\n            :items=\"getCrawlers\"\n            :search=\"search\"\n            class=\"elevation-1\"\n            :loading=\"isLoading\"\n            loading-text=\"Loading... Please wait\">\n            <template v-slot:item.name=\"{ item }\">\n              <b>{{item.name}}</b>\n            </template>\n            <template v-slot:item.start_url=\"{ item }\">\n              <a :href=\"item.start_url\" target=\"_blank\">{{item.start_url}}</a>\n            </template>\n            <template v-slot:item.state=\"{ item }\">\n                <span v-if=\"getCrawlerInfo(item.task_id) != null && crawlerButtonControlSwitch(item.task_id) \">\n                  <!-- {{ getJobState }} -->\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    v-if=\"getJobState == 'pending'\"\n                  >\n                  <v-icon left small>\n                    mdi-cog-sync\n                  </v-icon>\n                    {{getJobState}}\n                  </v-chip>\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    color=\"red\"\n                    text-color=\"white\"\n                    v-else-if=\"getJobState == 'running'\"\n                  >\n                    <span style=\"margin: 3px\">\n                      <i  class=\"fas fa-cog fa-spin\" style=\"color:white\"></i>\n                    </span>\n                      {{getJobState}}\n                  </v-chip>\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    color=\"green\"\n                    text-color=\"white\"\n                    v-else-if=\"getJobState == 'finished'\"\n                  >\n                  <v-icon left small>\n                    mdi-check-all\n                  </v-icon>\n                  {{getJobState}}\n                  </v-chip>\n                </span>\n                <span v-else-if=\"getCrawlerInfo(item.task_id) != null\">\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    v-if=\"getCrawlerInfo(item.task_id).state == 'pending'\"\n                  >\n                    {{getCrawlerInfo(item.task_id).state}}\n                  </v-chip>\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    color=\"red\"\n                    text-color=\"white\"\n                    v-else-if=\"getCrawlerInfo(item.task_id).state == 'running'\"\n                  >\n                    <span style=\"margin: 3px\">\n                      <i class=\"fas fa-cog fa-spin\" style=\"color:white\"></i>\n                    </span>\n                    {{getCrawlerInfo(item.task_id).state}}\n                  </v-chip>\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    color=\"green\"\n                    text-color=\"white\"\n                    v-else-if=\"getCrawlerInfo(item.task_id).state == 'finished'\"\n                  >\n                  <v-icon left small>\n                    mdi-check-all\n                  </v-icon>\n                  {{getCrawlerInfo(item.task_id).state}}\n                  </v-chip>\n                </span>\n                <span v-else-if=\"getOtherErrors.length > 0\">\n                  <v-chip\n                    class=\"ma-2\"\n                    small\n                    color=\"black\"\n                    text-color=\"white\"\n                  >\n                  <v-icon left small>\n                    mdi-restore-alert\n                  </v-icon>\n                  server error\n                  </v-chip>\n                </span>\n                <span v-else><v-icon small>mdi-check-outline</v-icon></span>\n            </template>\n            <template v-slot:item.task_id=\"{ item }\">\n                <v-chip\n                    class=\"ma-2\"\n                    small\n                    color=\"orange\"\n                    text-color=\"white\"\n                    v-if=\"item.task_id == 'New Crawler'\"\n                  >\n                  <v-icon left small>\n                    mdi-alert-decagram\n                  </v-icon>\n                  {{item.task_id}}\n                  </v-chip>\n                  <span v-else>{{item.task_id}}</span>\n            </template>\n              <template v-slot:item.btn_run_stop=\"{ item }\">\n                <v-btn\n                  icon\n                  v-if=\"crawlerButtonControlSwitch(item.task_id) && getJobState != 'finished'\"\n                  :disabled=\"getLoadingRunningCrawlerExecution || stoppingCrawler || getOtherErrors.length > 0\"\n                  v-on:click=\"exitRunningJob(item.task_id)\"\n                  color=\"black\">\n                  <v-icon>mdi-close-circle-outline</v-icon>\n                </v-btn>\n                <v-btn\n                  icon\n                  v-else\n                  :disabled=\"getLoadingRunningCrawlerExecution || getJobState != 'finished' || stoppingCrawler || getDeletingCrawlerLoading || getOtherErrors.length > 0\"\n                  v-on:click=\"executeCrawler(item.crawlerId)\"\n                  color=\"black\">\n                  <v-icon>mdi-play</v-icon>\n                </v-btn>\n              </template>\n              <template v-slot:item.btn_delete=\"{ item }\">\n                <v-btn\n                  icon\n                  :disabled=\"getLoadingRunningCrawlerExecution || getJobState != 'finished' || getOtherErrors.length > 0\"\n                  v-on:click=\"removeCrawler(item.crawlerId)\"\n                  color=\"black\">\n                  <v-icon>mdi-delete</v-icon>\n                </v-btn>\n              </template>\n              <!-- Details btn -->\n              <template v-slot:item.details_btn=\"{ item }\">\n                <v-btn\n                  icon\n                  v-if=\"crawlerButtonControlSwitch(item.task_id) && getJobState != 'finished'\"\n                  :disabled=\"getLoadingRunningCrawlerExecution || stoppingCrawler || !crawlerDetailsReady || getOtherErrors.length > 0\"\n                  v-on:click=\"openCrawlerDetails()\"\n                  color=\"black\">\n                  <v-icon>mdi-eye</v-icon>\n                </v-btn>\n              </template>\n            </v-data-table>\n        </v-card>\n        <v-overlay :value=\"stoppingCrawler\">\n          <v-progress-circular\n            indeterminate\n            size=\"64\"\n          ></v-progress-circular>\n        </v-overlay>\n\n        <v-dialog\n          v-model=\"getDeletingCrawlerLoading\"\n          hide-overlay\n          persistent\n          width=\"300\"\n        >\n          <v-card\n            color=\"primary\"\n            dark\n          >\n            <v-card-text>\n              Please stand by\n              <v-progress-linear\n                indeterminate\n                color=\"white\"\n                class=\"mb-0\"\n              ></v-progress-linear>\n            </v-card-text>\n          </v-card>\n        </v-dialog>\n        <v-snackbar\n        ref=\"snackbarDeleteCrawler\"\n        elevation=\"24\"\n        color=\"success\"\n        v-model=\"crawlerAlert\"\n        :timeout=\"crawlerAlertTimeoutMessage\"\n        >\n        <v-icon large>{{crawlerAlertIcon}}</v-icon>\n        <b style=\"font-size:150%; margin-left:5px\">{{ crawlerAlertMessage }}</b>\n        <template v-slot:action=\"{ attrs }\">\n          <v-btn\n            color=\"white\"\n            text\n            v-bind=\"attrs\"\n            @click=\"crawlerAlert = false\"\n          >\n            Close\n          </v-btn>\n        </template>\n    </v-snackbar>\n      </v-main>\n    <crawler-details \n        v-show=\"crawlerDetailsReady\" \n        :percentage=\"productsInsertedPercentage\" \n        :openDialog=\"triggerOpenCrawlerDetails\" \n        :activeCrawlerDetails=\"getCrawlerDetails\"\n        :jobState=\"getJobState\"\n        :crawlertimeCounter=\"timeCounter\"\n        @update-openDialog=\"updateDialog\"\n    ></crawler-details>\n   </v-app>\n</template>\n\n\n<script>\nimport {mapActions,mapGetters, mapState} from \"vuex\"\nimport CrawlerDetails from './CrawlerDetails.vue';\n  export default {\n  components: { CrawlerDetails },\n\n    name: 'CrawlersList',\n    props: {\n      refreshCrawlerListData: false\n    },\n    \n    data () {\n      return {\n        search: '',\n        inProcess: true,\n        startLongPolling:false,\n        polling: null,\n        stoppingCrawler: false,\n        crawlerAlert: false,\n        crawlerAlertTimeoutMessage: 5000,\n        crawlerAlertMessage: '',\n        crawlerAlertIcon: '',\n        triggerOpenCrawlerDetails: false,\n        totalProductsFound: 0,\n        lastCrawler: {},\n        lastCrawlerTaskId: null,\n        crawlerDetailsReady: false,\n        productsInsertedPercentage: 0,\n        timeCounter: '',\n        timeToPullFreshCrawlerData: 0,\n        job_id : null,\n        crawlerInProcess:{\n          project: 'default',\n          job: ''\n        },\n        headers: [\n          {\n            text: 'Crawler Name',\n            align: 'start',\n            value: 'name',\n          },\n          { text: 'Start URL', value: 'start_url', sortable: false },\n          { text: 'Status', value: 'state', sortable: false },\n          { text: 'Unique ID', value: 'task_id', sortable: false},\n          { text: ' ', value: 'btn_run_stop', sortable: false },\n          { text: ' ', value: 'btn_delete', sortable: false },\n          { text: ' ', value: 'details_btn', sortable: false },\n        ],\n      }\n    },\n\n    mounted () {\n      this.getJobState\n      this.getCrawlersData();\n    },\n\n    watch: {\n      getFullPath () {\n        this.getCrawlersData()\n      },\n\n      refreshCrawlerListData(){\n        location.reload();\n      },  \n\n      getJobState(newVal, oldVal){\n          // console.log(\"TIME TO PULL---> \"+this.timeToPullFreshCrawlerData)\n          this.pollingFreshCrawlersInfo()\n      },\n\n      getLastCrawlerTaskId(newVal, oldVal){\n          console.log(\"OLD ID: \"+oldVal)\n          console.log(\"NEW ID: \"+newVal)\n          if(oldVal != undefined){\n            console.log(\"-->READY\")\n            this.crawlerDetailsReady = true\n            \n          }\n      },\n      \n      getCrawlerProductsInserted(newVal, oldVal){\n        this.productsInsertedPercentage = this.calculatePercentage(newVal, this.getCrawlerDetails.number_of_products_found)\n      }\n\n    },\n\n    computed: {\n      ...mapGetters(\"Auth\",[\"isAuth\"]),\n      ...mapGetters(\"Crawler\",[\"getCrawlers\"]),\n      ...mapGetters(\"Crawler\",[\"isLoading\"]),\n      ...mapGetters(\"Crawler\",[\"getLoadingRunningCrawlerExecution\"]),\n      ...mapGetters(\"Crawler\",[\"getRunningCrawler\"]),\n      ...mapGetters(\"Crawler\",[\"getRunningCrawlerTaskId\"]),\n      ...mapGetters(\"Crawler\",[\"getJob\"]),\n      ...mapGetters(\"Crawler\",[\"getFinishedJobs\"]),\n      ...mapGetters(\"Crawler\",[\"getJobState\"]),\n      ...mapGetters(\"Crawler\",[\"getDeletingCrawlerLoading\"]),\n      ...mapGetters(\"Crawler\",[\"getCrawlerDetails\"]),\n      ...mapState(\"Crawler\",[\"crawler_details\"]),\n      ...mapState(\"Crawler\",[\"running_crawler_task_id\"]),\n      ...mapGetters(\"Crawler\",[\"getOtherErrors\"]),\n      \n\n      getFullPath () {\n        return this.$route.path\n      },\n\n      getLastCrawlerTaskId(){\n        return this.crawler_details.task_id\n      },\n\n      getCrawlerProductsInserted(){\n        try {\n          return this.getCrawlerDetails.products_inserted\n        } catch (error) {}\n      }\n\n      \n\n      \n    },\n    \n    methods:{\n        ...mapActions('Crawler',['getAllCrawlers']),\n        ...mapActions('Crawler',['runCrawler']),\n        ...mapActions('Crawler',['getJobs']),\n        ...mapActions('Crawler',['cancelRunningJob']),\n        ...mapActions('Crawler',['getRuningJobs']),\n        ...mapActions('Crawler',['deleteCrawler']),\n        ...mapActions('Crawler',['getCrawlerDetailsApi']),\n        \n\n        updateDialog(openDialog){\n          this.triggerOpenCrawlerDetails = openDialog\n        },\n\n        getCrawlersData(){\n          this.getAllCrawlers(this.crawlerInProcess)\n        },\n\n        \n\n\n        executeCrawler(id){\n          let playload = {'id': id, 'form': this.crawlerInProcess}\n          console.log(playload)\n          this.runCrawler(playload)\n          this.startLongPolling=true\n          this.crawlerAlert = true\n          this.crawlerAlertMessage = \"Crawler started\"\n          this.crawlerAlertIcon = 'mdi-spider'\n        },\n\n        exitRunningJob(taskId){\n          this.crawlerInProcess['job'] = taskId\n          this.stoppingCrawler = true\n          this.cancelRunningJob(this.crawlerInProcess)\n          this.inProcess = false\n          this.timeCounter = ''\n          \n          this.getAllCrawlers(this.crawlerInProcess)\n        },\n\n        removeCrawler(crawlerId){\n          let playload = {}\n          playload['crawler_id'] = crawlerId\n          playload['crawlerInProcess'] = this.crawlerInProcess\n          playload['vm'] = this\n          this.deleteCrawler(playload)\n        },\n\n        getCrawlerInfo (task_id){\n          let jobs = this.getJob\n          let finished_jobs = this.getFinishedJobs\n          let crawler = null\n          if(jobs.length > 0){\n              crawler = jobs.find(o => o.id === task_id);\n              if(crawler == null && finished_jobs.length > 0){\n                  crawler = finished_jobs.find(o => o.id === task_id);\n              }\n          }\n          else if(finished_jobs.length > 0){\n              crawler = finished_jobs.find(o => o.id === task_id);\n          }\n\n          return crawler\n        },\n\n        crawlerButtonControlSwitch(task_id){\n          let isActive = this.getCrawlerInfo(task_id) ? this.getCrawlerInfo(task_id).isActive : false\n          \n          return isActive\n        },\n\n        openCrawlerDetails(){\n          this.triggerOpenCrawlerDetails = true\n          console.log(\"TIME ES --->\")\n          console.log(this.getCrawlerDetails.estimatred_count_down_date)\n          this.timeCountDown(this.getCrawlerDetails.estimatred_count_down_date)\n        },\n\n        // computeTimeToPullCrawlerData(number_of_products_found){\n        //     if (number_of_products_found == undefined) {\n        //       return 1000\n        //     }\n        //     let number = number_of_products_found.toString().length;\n        //     console.log('nbr : '+number)\n        //     console.log(\"getJobState\"+this.getJobState)\n\n        //     if (this.getJobState != 'running') {\n        //       return 1000\n        //     }\n        //     else if ( number == 1 || number == 2) {\n        //       return 2000\n        //     }\n        //     else if ( number == 3){\n        //       return 6000\n        //     }\n        //     else if ( number == 4){\n        //       return 30000\n        //     }\n        //     else if ( number == 5){\n        //       return 50000\n        //     }\n        //     else if ( number == 6){\n        //       return 100000\n        //     }\n        //     return 200000\n        // },\n\n        calculatePercentage(value, total){\n          return Math.ceil((value/total) * 100)\n        },\n\n        pollingFreshCrawlersInfo(){\n            var interval = setInterval(\n              function () { \n                this.getAllCrawlers(this.crawlerInProcess)\n\n                this.getCrawlerDetailsApi()\n                  if(this.getLastCrawlerTaskId == this.getJob[0].id){\n                    this.crawlerDetailsReady = true\n                  }\n                  else{\n                    this.crawlerDetailsReady = false\n                  }\n                  \n             \n                if(this.getJobState == 'finished' || !this.isAuth){\n                  console.log(\"STOP POLLING!!\")\n                  clearInterval(interval);\n                  if(this.isAuth){\n                    let n_audio = new Audio('https://freesound.org/data/previews/320/320655_5260872-lq.mp3');\n                    n_audio.play();\n                  }\n                  this.stoppingCrawler = false\n                  this.crawlerDetailsReady = false\n                  this.crawlerAlert = true\n                  this.crawlerAlertMessage = \"Crawler finished\"\n                  this.crawlerAlertIcon = 'mdi-spider'\n                }\n              }\n              .bind(this), 5000)\n        },\n\n        timeCountDown(time){\n        // try {\n          let countDownDate = new Date(time).getTime();\n          \n\n            // Run myfunc every second\n            let myfunc = setInterval(function() {\n\n            let now = new Date().getTime();\n            let timeleft = countDownDate - now;\n\n            // Calculating the days, hours, minutes and seconds left\n            let days = Math.floor(timeleft / (1000 * 60 * 60 * 24));\n            let hours = Math.floor((timeleft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n            let minutes = Math.floor((timeleft % (1000 * 60 * 60)) / (1000 * 60));\n            let seconds = Math.floor((timeleft % (1000 * 60)) / 1000);\n                \n            this.timeCounter = days+\":\"+hours+\":\"+minutes+\":\"+seconds\n            console.log('TIME--------->')\n            console.log(this.timeCounter)\n            // Display the message when countdown is over\n            if (timeleft < 0 || this.getJobState == 'finished') {\n              this.timeCounter = ''\n              clearInterval(myfunc);\n                  console.log(\"TIME UP\")\n              }\n            }\n            .bind(this), 1000);\n        // }\n          // catch (error) {}\n        },\n\n    },\n\n    \n\n    created () {\n      this.getCrawlerDetailsApi()\n      \n      if(this.getJobState != 'finished'){\n        \n        this.pollingFreshCrawlersInfo()\n      }\n\n      \n    }\n    \n  }\n</script>"]}]}